"use client"

import { useState, useEffect, useRef } from "react"
import { 
  ChevronLeftIcon, 
  ChevronRightIcon, 
  CalendarIcon, 
  UserIcon, 
  ArrowRightIcon,
  PlayIcon,
  SparklesIcon,
  ShieldCheckIcon,
  HeartIcon,
  AcademicCapIcon,
  ClockIcon,
  PhoneIcon,
  DocumentTextIcon,
  BellIcon,
  StarIcon
} from "@heroicons/react/24/outline"
import { useNavigate } from "react-router-dom"
import banner1 from "../../images/banner1.jpg"

const bannerSlides = [
  {
    id: 1,
    image: banner1,
    title: "H·ªá th·ªëng Y t·∫ø H·ªçc ƒë∆∞·ªùng Th√¥ng minh",
    subtitle: "FPT University HCM",
    description: "N·ªÅn t·∫£ng qu·∫£n l√Ω s·ª©c kh·ªèe to√†n di·ªán cho h·ªçc sinh v·ªõi c√¥ng ngh·ªá hi·ªán ƒë·∫°i v√† quy tr√¨nh chuy√™n nghi·ªáp",
    ctaText: "Kh√°m ph√° ngay",
    ctaLink: "/dashboard",
    bgGradient: "from-blue-600/90 via-indigo-600/80 to-purple-600/90",
    features: ["AI-Powered", "24/7 Support", "Secure & Private"]
  },
  {
    id: 2,
    image: "/placeholder.svg?height=600&width=1400",
    title: "Ki·ªÉm tra S·ª©c kh·ªèe ƒê·ªãnh k·ª≥",
    subtitle: "ChƒÉm s√≥c to√†n di·ªán",
    description: "L·ªãch ki·ªÉm tra s·ª©c kh·ªèe h·ªçc k·ª≥ 2 cho t·∫•t c·∫£ h·ªçc sinh. ƒê·∫£m b·∫£o s·ª©c kh·ªèe to√†n di·ªán v·ªõi ƒë·ªôi ng≈© y b√°c sƒ© chuy√™n nghi·ªáp",
    ctaText: "Xem l·ªãch ki·ªÉm tra",
    ctaLink: "/health-checkup",
    bgGradient: "from-emerald-600/90 via-green-600/80 to-teal-600/90",
    features: ["Professional Staff", "Modern Equipment", "Comprehensive Care"]
  },
  {
    id: 3,
    image: "/placeholder.svg?height=600&width=1400",
    title: "Dinh d∆∞·ª°ng H·ªçc ƒë∆∞·ªùng",
    subtitle: "Ph√°t tri·ªÉn to√†n di·ªán",
    description: "Ch∆∞∆°ng tr√¨nh dinh d∆∞·ª°ng khoa h·ªçc ƒë∆∞·ª£c thi·∫øt k·∫ø b·ªüi chuy√™n gia, ƒë·∫£m b·∫£o s·ª± ph√°t tri·ªÉn t·ªëi ∆∞u cho h·ªçc sinh",
    ctaText: "T·∫£i t√†i li·ªáu",
    ctaLink: "/documents",
    bgGradient: "from-orange-600/90 via-amber-600/80 to-yellow-600/90",
    features: ["Expert Designed", "Balanced Nutrition", "Growth Focused"]
  },
  {
    id: 4,
    image: "/placeholder.svg?height=600&width=1400",
    title: "Ph√≤ng ch·ªëng D·ªãch b·ªánh",
    subtitle: "An to√†n tuy·ªát ƒë·ªëi",
    description: "H·ªá th·ªëng ph√≤ng ch·ªëng d·ªãch b·ªánh hi·ªán ƒë·∫°i v·ªõi quy tr√¨nh chu·∫©n qu·ªëc t·∫ø, ƒë·∫£m b·∫£o m√¥i tr∆∞·ªùng h·ªçc t·∫≠p an to√†n",
    ctaText: "T√¨m hi·ªÉu th√™m",
    ctaLink: "/blog",
    bgGradient: "from-purple-600/90 via-violet-600/80 to-indigo-600/90",
    features: ["International Standards", "Advanced Prevention", "Safe Environment"]
  },
]

const newsArticles = [
  {
    id: 1,
    title: "H∆∞·ªõng d·∫´n ph√≤ng ch·ªëng c√∫m m√πa cho h·ªçc sinh",
    summary: "C√°c bi·ªán ph√°p hi·ªáu qu·∫£ ƒë·ªÉ ph√≤ng ng·ª´a c√∫m m√πa trong m√¥i tr∆∞·ªùng h·ªçc ƒë∆∞·ªùng, bao g·ªìm v·ªá sinh c√° nh√¢n v√† tƒÉng c∆∞·ªùng s·ª©c ƒë·ªÅ kh√°ng.",
    image: "/placeholder.svg?height=300&width=400",
    author: "BS. Nguy·ªÖn Th·ªã Lan",
    date: "15/01/2025",
    category: "S·ª©c kh·ªèe",
    readTime: "5 ph√∫t ƒë·ªçc",
    isHot: true,
    views: "2.1k",
    priority: "high"
  },
  {
    id: 2,
    title: "Ch·∫ø ƒë·ªô dinh d∆∞·ª°ng c√¢n b·∫±ng cho tr·∫ª em tu·ªïi h·ªçc ƒë∆∞·ªùng",
    summary: "Menu dinh d∆∞·ª°ng khoa h·ªçc gi√∫p tr·∫ª ph√°t tri·ªÉn to√†n di·ªán v·ªÅ th·ªÉ ch·∫•t v√† tr√≠ tu·ªá, ƒë∆∞·ª£c khuy·∫øn ngh·ªã b·ªüi chuy√™n gia dinh d∆∞·ª°ng.",
    image: "/placeholder.svg?height=300&width=400",
    author: "TS. Tr·∫ßn VƒÉn Minh",
    date: "12/01/2025",
    category: "Dinh d∆∞·ª°ng",
    readTime: "7 ph√∫t ƒë·ªçc",
    isHot: false,
    views: "1.8k",
    priority: "medium"
  },
  {
    id: 3,
    title: "T·∫ßm quan tr·ªçng c·ªßa vi·ªác ki·ªÉm tra th·ªã l·ª±c ƒë·ªãnh k·ª≥",
    summary: "Ph√°t hi·ªán s·ªõm c√°c v·∫•n ƒë·ªÅ v·ªÅ m·∫Øt ·ªü tr·∫ª em ƒë·ªÉ c√≥ bi·ªán ph√°p can thi·ªáp k·ªãp th·ªùi, b·∫£o v·ªá th·ªã l·ª±c cho t∆∞∆°ng lai.",
    image: "/placeholder.svg?height=300&width=400",
    author: "BS. L√™ Th·ªã Hoa",
    date: "10/01/2025",
    category: "Kh√°m s·ª©c kh·ªèe",
    readTime: "4 ph√∫t ƒë·ªçc",
    isHot: false,
    views: "1.5k",
    priority: "medium"
  },
  {
    id: 4,
    title: "C√°ch x·ª≠ l√Ω khi tr·∫ª b·ªã s·ªët t·∫°i tr∆∞·ªùng h·ªçc",
    summary: "Quy tr√¨nh chu·∫©n ƒë·ªÉ x·ª≠ l√Ω t√¨nh hu·ªëng tr·∫ª b·ªã s·ªët trong gi·ªù h·ªçc, ƒë·∫£m b·∫£o an to√†n v√† hi·ªáu qu·∫£ nh·∫•t.",
    image: "/placeholder.svg?height=300&width=400",
    author: "Y t√° Ph·∫°m Th·ªã Mai",
    date: "08/01/2025",
    category: "C·∫•p c·ª©u",
    readTime: "6 ph√∫t ƒë·ªçc",
    isHot: true,
    views: "3.2k",
    priority: "high"
  },
  {
    id: 5,
    title: "L·ª£i √≠ch c·ªßa ho·∫°t ƒë·ªông th·ªÉ ch·∫•t ƒë·ªëi v·ªõi s·ª©c kh·ªèe h·ªçc sinh",
    summary: "T·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n kh√¥ng ch·ªâ gi√∫p c·∫£i thi·ªán s·ª©c kh·ªèe th·ªÉ ch·∫•t m√† c√≤n n√¢ng cao kh·∫£ nƒÉng h·ªçc t·∫≠p v√† tinh th·∫ßn.",
    image: "/placeholder.svg?height=300&width=400",
    author: "ThS. Ho√†ng VƒÉn Nam",
    date: "05/01/2025",
    category: "Th·ªÉ ch·∫•t",
    readTime: "8 ph√∫t ƒë·ªçc",
    isHot: false,
    views: "2.7k",
    priority: "low"
  },
  {
    id: 6,
    title: "ChƒÉm s√≥c s·ª©c kh·ªèe rƒÉng mi·ªáng cho tr·∫ª em",
    summary: "H∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ c√°ch chƒÉm s√≥c rƒÉng mi·ªáng ƒë√∫ng c√°ch, ph√≤ng ng·ª´a s√¢u rƒÉng v√† c√°c b·ªánh l√Ω nha khoa.",
    image: "/placeholder.svg?height=300&width=400",
    author: "BS. Nha khoa V≈© Th·ªã Lan",
    date: "03/01/2025",
    category: "Nha khoa",
    readTime: "5 ph√∫t ƒë·ªçc",
    isHot: false,
    views: "1.9k",
    priority: "low"
  },
]

const features = [
  {
    icon: HeartIcon,
    title: "H·ªì s∆° s·ª©c kh·ªèe",
    desc: "Qu·∫£n l√Ω to√†n di·ªán th√¥ng tin s·ª©c kh·ªèe h·ªçc sinh v·ªõi c√¥ng ngh·ªá b·∫£o m·∫≠t cao v√† giao di·ªán th√¢n thi·ªán",
    color: "from-pink-500 to-rose-500",
    bgColor: "from-pink-50 to-rose-50",
    stats: "1,247+ h·ªì s∆°",
    link: "/health-record"
  },
  {
    icon: ShieldCheckIcon,
    title: "Qu·∫£n l√Ω thu·ªëc",
    desc: "H·ªá th·ªëng theo d√µi v√† qu·∫£n l√Ω thu·ªëc th√¥ng minh, ƒë·∫£m b·∫£o an to√†n v√† hi·ªáu qu·∫£ trong vi·ªác ƒëi·ªÅu tr·ªã",
    color: "from-cyan-500 to-blue-500",
    bgColor: "from-cyan-50 to-blue-50",
    stats: "98.5% ƒë·ªô ch√≠nh x√°c",
    link: "/medical-send"
  },
  {
    icon: SparklesIcon,
    title: "X·ª≠ l√Ω s·ª± ki·ªán y t·∫ø",
    desc: "Quy tr√¨nh x·ª≠ l√Ω s·ª± ki·ªán y t·∫ø nhanh ch√≥ng v√† chuy√™n nghi·ªáp v·ªõi ƒë·ªôi ng≈© y t·∫ø 24/7",
    color: "from-red-500 to-orange-500",
    bgColor: "from-red-50 to-orange-50",
    stats: "< 5 ph√∫t ph·∫£n h·ªìi",
    link: "/dashboard"
  },
  {
    icon: ShieldCheckIcon,
    title: "Ti√™m ch·ªßng",
    desc: "Qu·∫£n l√Ω l·ªãch ti√™m ch·ªßng th√¥ng minh v·ªõi nh·∫Øc nh·ªü t·ª± ƒë·ªông v√† theo d√µi ph·∫£n ·ª©ng sau ti√™m",
    color: "from-blue-500 to-indigo-500",
    bgColor: "from-blue-50 to-indigo-50",
    stats: "100% theo d√µi",
    link: "/vaccination"
  },
  {
    icon: AcademicCapIcon,
    title: "Ki·ªÉm tra y t·∫ø ƒë·ªãnh k·ª≥",
    desc: "Ch∆∞∆°ng tr√¨nh ki·ªÉm tra s·ª©c kh·ªèe ƒë·ªãnh k·ª≥ to√†n di·ªán v·ªõi thi·∫øt b·ªã hi·ªán ƒë·∫°i v√† b√°o c√°o chi ti·∫øt",
    color: "from-green-500 to-emerald-500",
    bgColor: "from-green-50 to-emerald-50",
    stats: "ƒê·ªãnh k·ª≥ 6 th√°ng",
    link: "/health-checkup"
  },
  {
    icon: ClockIcon,
    title: "B√°o c√°o & Th·ªëng k√™",
    desc: "Dashboard th√¥ng minh v·ªõi ph√¢n t√≠ch d·ªØ li·ªáu s·ª©c kh·ªèe v√† b√°o c√°o xu h∆∞·ªõng theo th·ªùi gian th·ª±c",
    color: "from-yellow-500 to-amber-500",
    bgColor: "from-yellow-50 to-amber-50",
    stats: "Real-time data",
    link: "/dashboard"
  },
]

const quickAccess = [
  {
    icon: "üè•",
    title: "Khai b√°o h·ªì s∆° s·ª©c kh·ªèe",
    desc: "C·∫≠p nh·∫≠t th√¥ng tin s·ª©c kh·ªèe con em m·ªôt c√°ch nhanh ch√≥ng v√† b·∫£o m·∫≠t",
    color: "from-blue-500 to-cyan-500",
    link: "/health-record"
  },
  {
    icon: "üíä",
    title: "G·ª≠i thu·ªëc cho tr∆∞·ªùng",
    desc: "ƒêƒÉng k√Ω g·ª≠i thu·ªëc v·ªõi h∆∞·ªõng d·∫´n chi ti·∫øt v√† theo d√µi t√¨nh tr·∫°ng",
    color: "from-purple-500 to-pink-500",
    link: "/medical-send"
  },
  {
    icon: "üìÖ",
    title: "L·ªãch ki·ªÉm tra y t·∫ø",
    desc: "Xem l·ªãch ki·ªÉm tra y t·∫ø ƒë·ªãnh k·ª≥ v√† ƒë·∫∑t l·ªãch h·∫πn tr·ª±c tuy·∫øn",
    color: "from-green-500 to-teal-500",
    link: "/health-checkup"
  },
  {
    icon: "üíâ",
    title: "L·ªãch ti√™m ch·ªßng",
    desc: "Theo d√µi l·ªãch ti√™m ch·ªßng v√† nh·∫≠n th√¥ng b√°o nh·∫Øc nh·ªü t·ª± ƒë·ªông",
    color: "from-orange-500 to-red-500",
    link: "/vaccination"
  },
  {
    icon: "üö®",
    title: "Li√™n h·ªá y t·∫ø kh·∫©n c·∫•p",
    desc: "ƒê∆∞·ªùng d√¢y n√≥ng 24/7 cho c√°c t√¨nh hu·ªëng y t·∫ø kh·∫©n c·∫•p",
    color: "from-red-500 to-pink-500",
    link: "/contact"
  },
  {
    icon: "üìö",
    title: "T√†i li·ªáu s·ª©c kh·ªèe",
    desc: "Th∆∞ vi·ªán t√†i li·ªáu y t·∫ø phong ph√∫ v·ªõi n·ªôi dung c·∫≠p nh·∫≠t li√™n t·ª•c",
    color: "from-indigo-500 to-purple-500",
    link: "/documents"
  },
]

const stats = [
  { value: "1,247", label: "H·ªçc sinh ƒëƒÉng k√Ω", icon: "üë•", change: "+12%", trend: "up" },
  { value: "98.5%", label: "T·ª∑ l·ªá ti√™m ch·ªßng ƒë·∫ßy ƒë·ªß", icon: "üíâ", change: "+2.1%", trend: "up" },
  { value: "456", label: "S·ª± ki·ªán y t·∫ø ƒë√£ x·ª≠ l√Ω", icon: "üö®", change: "+8%", trend: "up" },
  { value: "100%", label: "Ph·ª• huynh h√†i l√≤ng", icon: "‚≠ê", change: "0%", trend: "stable" },
]


function HomeForm() {
  const navigate = useNavigate()
  const [currentSlide, setCurrentSlide] = useState(0)
  const [isAutoPlay, setIsAutoPlay] = useState(true)
  const [currentNewsSlide, setCurrentNewsSlide] = useState(0)
  const [isNewsAutoPlay, setIsNewsAutoPlay] = useState(true)
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })
  
  const heroRef = useRef(null)
  const observerRef = useRef(null)

  // Intersection Observer for animations
  useEffect(() => {
    observerRef.current = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // setIsVisible(prev => ({
            //   ...prev,
            //   [entry.target.dataset.animate]: true
            // }))
          }
        })
      },
      { threshold: 0.1, rootMargin: '50px' }
    )

    const elements = document.querySelectorAll('[data-animate]')
    elements.forEach(el => observerRef.current.observe(el))

    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect()
      }
    }
  }, [])

  // Mouse tracking for parallax
  useEffect(() => {
    const handleMouseMove = (e) => {
      setMousePosition({
        x: (e.clientX / window.innerWidth) * 100,
        y: (e.clientY / window.innerHeight) * 100
      })
    }

    window.addEventListener('mousemove', handleMouseMove)
    return () => window.removeEventListener('mousemove', handleMouseMove)
  }, [])

  // Auto-slide functionality for banner
  useEffect(() => {
    if (!isAutoPlay) return

    const interval = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % bannerSlides.length)
    }, 6000)

    return () => clearInterval(interval)
  }, [isAutoPlay])

  // Auto-slide functionality for news
  useEffect(() => {
    if (!isNewsAutoPlay) return

    const interval = setInterval(() => {
      setCurrentNewsSlide((prev) => (prev + 1) % Math.ceil(newsArticles.length / 3))
    }, 5000)

    return () => clearInterval(interval)
  }, [isNewsAutoPlay])

  const goToSlide = (index) => {
    setCurrentSlide(index)
  }

  const nextNewsSlide = () => {
    setCurrentNewsSlide((prev) => (prev + 1) % Math.ceil(newsArticles.length / 3))
  }

  const prevNewsSlide = () => {
    setCurrentNewsSlide((prev) => (prev - 1 + Math.ceil(newsArticles.length / 3)) % Math.ceil(newsArticles.length / 3))
  }

  return (
    <main className="w-full overflow-hidden bg-gray-50">
      

      {/* Hero Banner Section */}
      <section 
        ref={heroRef}
        className="relative w-full h-screen min-h-[700px] overflow-hidden"
        onMouseEnter={() => setIsAutoPlay(false)}
        onMouseLeave={() => setIsAutoPlay(true)}
      >
        {/* Background Slides */}
        <div className="absolute inset-0">
          {bannerSlides.map((slide, index) => (
            <div
              key={slide.id}
              className={`absolute inset-0 transition-all duration-1000 ease-in-out ${
                index === currentSlide ? "opacity-100 scale-100" : "opacity-0 scale-105"
              }`}
            >
              {/* Background Image with Parallax */}
              <div 
                className="absolute inset-0 bg-cover bg-center transition-transform duration-1000"
                style={{
                  backgroundImage: `url(${slide.image || "/placeholder.svg"})`,
                  transform: `translate(${(mousePosition.x - 50) * 0.02}px, ${(mousePosition.y - 50) * 0.02}px) scale(1.1)`
                }}
              />
              
              {/* Gradient Overlay */}
              <div className={`absolute inset-0 bg-gradient-to-r ${slide.bgGradient}`} />
              
              {/* Content */}
              <div className="absolute inset-0 flex items-center justify-center text-center text-white z-10">
                <div className="max-w-5xl mx-auto px-4">
                  <div className="mb-4">
                    <span className="inline-block bg-white/20 backdrop-blur-sm px-4 py-2 rounded-full text-sm font-medium mb-4">
                      {slide.subtitle}
                    </span>
                  </div>
                  <h1 className="text-4xl md:text-6xl lg:text-7xl font-bold mb-6 leading-tight">
                    {slide.title}
                  </h1>
                  <p className="text-lg md:text-xl lg:text-2xl mb-8 opacity-90 max-w-3xl mx-auto leading-relaxed">
                    {slide.description}
                  </p>
                  <div className="flex flex-wrap justify-center gap-3 mb-10">
                    {slide.features.map((feature, idx) => (
                      <span key={idx} className="bg-white/20 backdrop-blur-sm px-4 py-2 rounded-full text-sm font-medium border border-white/30">
                        ‚úì {feature}
                      </span>
                    ))}
                  </div>
                  <div className="flex flex-col sm:flex-row gap-4 justify-center">
                    <button
                      onClick={() => navigate(slide.ctaLink)}
                      className="bg-white text-gray-800 font-bold py-4 px-8 rounded-full shadow-lg hover:bg-gray-100 transition-all duration-300 transform hover:scale-105 hover:shadow-xl"
                    >
                      {slide.ctaText}
                    </button>
                    <button
                      onClick={() => navigate("/contact")}
                      className="border-2 border-white text-white font-bold py-4 px-8 rounded-full hover:bg-white hover:text-gray-800 transition-all duration-300 transform hover:scale-105"
                    >
                      Li√™n h·ªá ngay
                    </button>
                  </div>
                </div>
              </div>
              
              {/* Animated Background Elements */}
              <div className="absolute inset-0 overflow-hidden pointer-events-none">
                <div className="absolute top-1/4 left-1/4 w-32 h-32 bg-white/10 rounded-full animate-pulse">
                  <PlayIcon className="w-8 h-8 text-white m-auto mt-12" />
                </div>
                <div className="absolute top-1/3 right-1/4 w-24 h-24 bg-white/10 rounded-full animate-pulse animation-delay-1000">
                  <SparklesIcon className="w-6 h-6 text-white m-auto mt-9" />
                </div>
                <div className="absolute bottom-1/4 left-1/3 w-28 h-28 bg-white/10 rounded-full animate-pulse animation-delay-2000">
                  <ShieldCheckIcon className="w-7 h-7 text-white m-auto mt-10" />
                </div>
                <div className="absolute bottom-1/3 right-1/3 w-20 h-20 bg-white/10 rounded-full animate-pulse animation-delay-3000">
                  <HeartIcon className="w-5 h-5 text-white m-auto mt-7" />
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Navigation Controls */}
        <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex items-center gap-6 z-20">
          {/* Dots Indicator */}
          <div className="flex space-x-3">
            {bannerSlides.map((_, index) => (
              <button
                key={index}
                onClick={() => goToSlide(index)}
                className={`w-3 h-3 rounded-full transition-all duration-300 ${
                  index === currentSlide
                    ? "bg-white scale-125 shadow-lg"
                    : "bg-white/50 hover:bg-white/75 hover:scale-110"
                }`}
                title={`ƒêi ƒë·∫øn slide ${index + 1}`}
              />
            ))}
          </div>
          
          {/* Slide counter */}
          <div className="bg-black/30 backdrop-blur-sm text-white px-3 py-1 rounded-full text-sm">
            {currentSlide + 1} / {bannerSlides.length}
          </div>
        </div>
      </section>

      {/* Quick Access Section - Moved up for better UX */}
      <section className="py-16 px-4 bg-white" data-animate="quickaccess">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-800 mb-4">Truy c·∫≠p nhanh</h2>
            <p className="text-gray-600 text-lg">C√°c ch·ª©c nƒÉng th∆∞·ªùng s·ª≠ d·ª•ng nh·∫•t</p>
          </div>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6">
            {quickAccess.map((item, idx) => (
              <div
                key={idx}
                className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-xl transition-all duration-300 cursor-pointer group hover:-translate-y-2"
                onClick={() => navigate(item.link)}
              >
                <div className={`w-14 h-14 mx-auto mb-4 rounded-xl bg-gradient-to-r ${item.color} flex items-center justify-center text-2xl shadow-lg group-hover:scale-110 transition-transform duration-300`}>
                  {item.icon}
                </div>
                <h4 className="text-sm font-bold text-gray-800 mb-2 group-hover:text-blue-600 transition-colors text-center line-clamp-2">
                  {item.title}
                </h4>
                <p className="text-xs text-gray-600 text-center line-clamp-2">{item.desc}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 px-4 bg-gradient-to-br from-gray-50 to-blue-50" data-animate="features">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold text-gray-800 mb-4">Ch·ª©c nƒÉng ch√≠nh</h2>
            <p className="text-gray-600 text-xl max-w-3xl mx-auto">H·ªá th·ªëng qu·∫£n l√Ω y t·∫ø h·ªçc ƒë∆∞·ªùng to√†n di·ªán v√† hi·ªán ƒë·∫°i, ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ƒë·∫£m b·∫£o s·ª©c kh·ªèe t·ªëi ∆∞u cho h·ªçc sinh</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {features.map((feature, idx) => (
              <div
                key={idx}
                className="bg-white rounded-3xl shadow-xl p-8 text-center border border-gray-100 hover:shadow-2xl transition-all duration-300 group hover:-translate-y-2 cursor-pointer"
                onClick={() => navigate(feature.link)}
              >
                <div className={`w-20 h-20 mx-auto mb-6 rounded-2xl bg-gradient-to-r ${feature.color} flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>
                  <feature.icon className="w-10 h-10 text-white" />
                </div>
                <h3 className="text-xl font-bold text-gray-800 mb-3 group-hover:text-blue-600 transition-colors">{feature.title}</h3>
                <p className="text-gray-600 leading-relaxed mb-4">{feature.desc}</p>
                <div className="inline-flex items-center gap-2 text-sm text-blue-600 font-semibold bg-blue-50 px-3 py-1 rounded-full">
                  <StarIcon className="w-4 h-4" />
                  {feature.stats}
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* News Section */}
      <section
        className="py-20 px-4 bg-white"
        onMouseEnter={() => setIsNewsAutoPlay(false)}
        onMouseLeave={() => setIsNewsAutoPlay(true)}
        data-animate="news"
      >
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold text-gray-800 mb-4">Tin t·ª©c s·ª©c kh·ªèe</h2>
            <p className="text-gray-600 text-xl">C·∫≠p nh·∫≠t th√¥ng tin y t·∫ø v√† s·ª©c kh·ªèe h·ªçc ƒë∆∞·ªùng m·ªõi nh·∫•t</p>
          </div>

          {/* Featured News */}
          <div className="mb-12">
            <h3 className="text-2xl font-bold text-gray-800 mb-6 flex items-center gap-2">
              <BellIcon className="w-6 h-6 text-red-500" />
              Tin n·ªïi b·∫≠t
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              {newsArticles.filter(article => article.isHot).slice(0, 2).map((article) => (
                <div
                  key={article.id}
                  className="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-300 group hover:-translate-y-2 border-l-4 border-red-500"
                >
                  <div className="relative overflow-hidden">
                    <img
                      src={article.image || "/placeholder.svg"}
                      alt={article.title}
                      className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                    />
                    <div className="absolute top-4 left-4 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-bold flex items-center gap-1">
                      üî• HOT
                    </div>
                    <div className="absolute top-4 right-4 bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-medium">
                      {article.category}
                    </div>
                  </div>

                  <div className="p-6">
                    <h3 className="text-xl font-bold text-gray-800 mb-3 line-clamp-2 group-hover:text-blue-600 transition-colors">
                      {article.title}
                    </h3>
                    <p className="text-gray-600 text-sm mb-4 line-clamp-3 leading-relaxed">{article.summary}</p>

                    <div className="flex items-center justify-between text-sm text-gray-500 mb-4">
                      <div className="flex items-center gap-2">
                        <UserIcon className="w-4 h-4" />
                        <span>{article.author}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CalendarIcon className="w-4 h-4" />
                        <span>{article.date}</span>
                      </div>
                    </div>

                    <div className="flex items-center justify-between">
                      <span className="text-sm text-blue-600 font-medium">{article.readTime}</span>
                      <button className="flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium transition-colors group">
                        ƒê·ªçc th√™m
                        <ArrowRightIcon className="w-4 h-4 group-hover:translate-x-1 transition-transform" />
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Regular News Carousel */}
          <div className="relative overflow-hidden">
            <div
              className="flex transition-transform duration-500 ease-in-out"
              style={{ transform: `translateX(-${currentNewsSlide * 100}%)` }}
            >
              {Array.from({ length: Math.ceil(newsArticles.filter(article => !article.isHot).length / 3) }).map((_, slideIndex) => (
                <div key={slideIndex} className="w-full flex-shrink-0">
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 px-4">
                    {newsArticles.filter(article => !article.isHot).slice(slideIndex * 3, slideIndex * 3 + 3).map((article) => (
                      <div
                        key={article.id}
                        className="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-2xl transition-all duration-300 group hover:-translate-y-2"
                      >
                        <div className="relative overflow-hidden">
                          <img
                            src={article.image || "/placeholder.svg"}
                            alt={article.title}
                            className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                          />
                          <div className="absolute top-4 right-4 bg-blue-500 text-white px-3 py-1 rounded-full text-sm font-medium">
                            {article.category}
                          </div>
                        </div>

                        <div className="p-6">
                          <h3 className="text-xl font-bold text-gray-800 mb-3 line-clamp-2 group-hover:text-blue-600 transition-colors">
                            {article.title}
                          </h3>
                          <p className="text-gray-600 text-sm mb-4 line-clamp-3 leading-relaxed">{article.summary}</p>

                          <div className="flex items-center justify-between text-sm text-gray-500 mb-4">
                            <div className="flex items-center gap-2">
                              <UserIcon className="w-4 h-4" />
                              <span>{article.author}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <CalendarIcon className="w-4 h-4" />
                              <span>{article.date}</span>
                            </div>
                          </div>

                          <div className="flex items-center justify-between">
                            <span className="text-sm text-blue-600 font-medium">{article.readTime}</span>
                            <button className="flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium transition-colors group">
                              ƒê·ªçc th√™m
                              <ArrowRightIcon className="w-4 h-4 group-hover:translate-x-1 transition-transform" />
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>

            {/* News Navigation Arrows */}
            <button
              onClick={prevNewsSlide}
              className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white shadow-lg text-gray-800 p-3 rounded-full hover:bg-gray-50 transition-all duration-200 z-10"
              title="Tin t·ª©c tr∆∞·ªõc"
            >
              <ChevronLeftIcon className="w-6 h-6" />
            </button>

            <button
              onClick={nextNewsSlide}
              className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white shadow-lg text-gray-800 p-3 rounded-full hover:bg-gray-50 transition-all duration-200 z-10"
              title="Tin t·ª©c ti·∫øp theo"
            >
              <ChevronRightIcon className="w-6 h-6" />
            </button>
          </div>

          {/* News Dots Indicator */}
          <div className="flex justify-center mt-8 space-x-2">
            {Array.from({ length: Math.ceil(newsArticles.filter(article => !article.isHot).length / 3) }).map((_, index) => (
              <button
                key={index}
                onClick={() => setCurrentNewsSlide(index)}
                className={`w-3 h-3 rounded-full transition-all duration-200 ${
                  index === currentNewsSlide ? "bg-blue-600 scale-125" : "bg-gray-300 hover:bg-gray-400"
                }`}
              />
            ))}
          </div>

          {/* View All News Button */}
          <div className="text-center mt-12">
            <button
              onClick={() => navigate("/blog")}
              className="inline-flex items-center gap-3 bg-blue-600 text-white font-bold py-4 px-8 rounded-full shadow-lg hover:bg-blue-700 transition-all duration-300 transform hover:scale-105"
            >
              <DocumentTextIcon className="w-5 h-5" />
              Xem t·∫•t c·∫£ tin t·ª©c
              <ArrowRightIcon className="w-5 h-5" />
            </button>
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="bg-gradient-to-br from-blue-600 to-indigo-700 py-20 px-4 text-white" data-animate="stats">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold mb-4">Th·ªëng k√™ h·ªá th·ªëng</h2>
            <p className="text-blue-100 text-xl">NƒÉm h·ªçc 2024-2025</p>
          </div>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
            {stats.map((stat, idx) => (
              <div key={idx} className="text-center">
                <div className="bg-white/10 rounded-3xl p-8 shadow-xl backdrop-blur-sm hover:bg-white/20 transition-all duration-300 group">
                  <div className="text-4xl mb-4 group-hover:scale-110 transition-transform duration-300">{stat.icon}</div>
                  <h3 className="text-3xl md:text-4xl font-extrabold mb-2">{stat.value}</h3>
                  <p className="text-blue-100 mb-2">{stat.label}</p>
                  <div className={`text-sm font-semibold flex items-center justify-center gap-1 ${
                    stat.trend === 'up' ? 'text-green-300' : stat.trend === 'down' ? 'text-red-300' : 'text-yellow-300'
                  }`}>
                    {stat.trend === 'up' && '‚Üó'}
                    {stat.trend === 'down' && '‚Üò'}
                    {stat.trend === 'stable' && '‚Üí'}
                    {stat.change}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Call to Action Section */}
      <section className="py-20 px-4 bg-gradient-to-r from-green-600 to-emerald-700 text-white">
        <div className="max-w-4xl mx-auto text-center">
          <h2 className="text-4xl md:text-5xl font-bold mb-6">S·∫µn s√†ng b·∫Øt ƒë·∫ßu?</h2>
          <p className="text-xl mb-8 opacity-90">
            Tham gia h·ªá th·ªëng qu·∫£n l√Ω y t·∫ø h·ªçc ƒë∆∞·ªùng th√¥ng minh ngay h√¥m nay ƒë·ªÉ ƒë·∫£m b·∫£o s·ª©c kh·ªèe t·ªët nh·∫•t cho con em b·∫°n
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <button
              onClick={() => navigate("/login")}
              className="bg-white text-green-600 font-bold py-4 px-8 rounded-full shadow-lg hover:bg-gray-100 transition-all duration-300 transform hover:scale-105"
            >
              ƒêƒÉng nh·∫≠p ngay
            </button>
            <button
              onClick={() => navigate("/contact")}
              className="border-2 border-white text-white font-bold py-4 px-8 rounded-full hover:bg-white hover:text-green-600 transition-all duration-300 transform hover:scale-105"
            >
              Li√™n h·ªá t∆∞ v·∫•n
            </button>
          </div>
        </div>
      </section>
    </main>
  )
}

export default HomeForm